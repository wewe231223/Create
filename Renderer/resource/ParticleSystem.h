#pragma once 

//=============================================================================
//					Stream Output 을 활용하는 ParticleSystem
// 
// 1. Spark 파티클
// 역할: 불꽃 튀김, 전기 스파크 등을 표현.
// 동작 :
//	짧은 생명주기를 가지며, 빠르게 생성되고 사라짐.
//	고속으로 작은 궤적을 남김.
//	밝은 색상 변화와 빛나는 효과가 포함됨.
//	사용 사례 : 폭발, 전기 효과, 도구가 표면과 마찰할 때의 스파크 효과.
// 
//	2. Smoke 파티클
//	역할 : 연기, 안개, 구름과 같은 자연스러운 확산 효과를 표현.
//	동작 :
//	파티클 크기가 시간이 지남에 따라 점점 커짐.
//	투명도(Alpha)가 점점 줄어들면서 사라짐.
//	느리게 상승하거나 부드럽게 확산.
//	사용 사례 : 폭발 후 연기, 불타는 물체에서 나오는 연기, 안개.
// 
//	3. Dust 파티클
//	역할 : 먼지, 흙, 작은 입자들이 흩날리는 효과를 표현.
//	동작 :
//	무작위로 움직이며, 중력이나 바람의 영향을 받음.
//	비교적 낮은 투명도를 가지며, 다양한 크기의 입자가 혼합됨.
//	사용 사례 : 사막의 먼지, 캐릭터의 발걸음에서 발생하는 먼지, 충격파.
// 
//	4. Trail 파티클
//	역할 : 움직이는 물체 뒤에 남는 흔적을 표현.
//	동작 :
//	일정 궤적을 따라 생성되며, 시간이 지나면서 점점 사라짐.
//	연속적인 생성이 중요.
//	사용 사례 : 로켓 발사 흔적, 움직이는 빛 효과, 고속 차량의 뒤꽁무니.
// 
//	5. Water Particle
//	역할 : 물방울, 비, 스플래시와 같은 액체 효과를 표현.
//	동작 :
//	중력 방향으로 빠르게 낙하하며, 충돌 시 분산됨.
//	반사 및 투명 효과를 동반.
//	사용 사례 : 비 오는 환경, 폭포, 물속 파편.
// 
//	6. Flame 파티클
//	역할 : 불꽃, 화염 효과를 표현.
//	동작 :
//	위로 상승하며 점점 사라짐.
//	색상 변화가 주를 이룸(예 : 빨강 → 노랑 → 투명).
//	부드러운 흐림(blur) 효과가 자주 추가됨.
//	사용 사례 : 모닥불, 용암, 화염 방사기.
// 
//	7. Explosion 파티클
//	역할 : 폭발의 순간적 효과를 표현.
//	동작 :
//	짧은 시간 동안 고속으로 많은 입자가 방사형으로 퍼짐.
//	색상과 크기가 빠르게 변화.
//	가끔 추가로 연기 또는 잔여 파티클과 결합.
//	사용 사례 : 폭탄, 충돌 효과.
// 
//	8. Bubble 파티클
//	역할 : 공기 방울, 물속에서의 움직임을 표현.
//	동작 :
//	위로 부드럽게 상승하며 크기가 변화.
//	표면에 닿으면 터지는 효과.
//	사용 사례 : 물속 장면, 캐릭터가 물을 다룰 때.
// 
//	9. Magic 파티클
//	역할 : 마법, 초자연적인 효과를 표현.
//	동작 :
//	보통 빛나는 입자들이 특정 궤도를 따라 이동.
//	색상이 점진적으로 변화하거나 펄스 효과를 가짐.
//	잔광 효과(trail)가 자주 포함됨.
//	사용 사례 : 주문 시전, 포털, 마법 공격.
// 
//	10. Debris 파티클
//	역할 : 파편, 부서진 물체 표현.
//	동작 :
//	충격 지점에서 튀어나가며 중력에 따라 떨어짐.
//	랜덤한 크기와 움직임을 가짐.
//	사용 사례 : 건물이 무너질 때, 폭발 후 잔해.
// 
// 
//	파티클 시스템 동작 방식
//	생성(Spawn) : 특정 이벤트나 시간 간격에 따라 파티클이 생성됨.
//	속성 변화 : 위치, 크기, 투명도, 색상이 시간에 따라 변화.
//	물리적 영향 : 중력, 바람, 충돌 등의 물리 효과를 받아 움직임.
//	소멸(Death) : 일정 시간 후 자연스럽게 사라지거나, 화면 밖으로 나가면 제거됨.
// 
//=============================================================================




 
class ParticleSystem {
	struct Buffer {
		ComPtr<ID3D12Resource> mBuffer{ nullptr };
		ParticleVertex* mBufferPtr{ nullptr };
	};
public:
	ParticleSystem();
	~ParticleSystem();
public:
	void Render(ComPtr<ID3D12GraphicsCommandList>& commandList);
private:
	ComPtr<ID3D12Resource> mParticleSOBuffer{ nullptr };

	std::array<Buffer, static_cast<size_t>(EGlobalConstants::GC_FrameCount)> mParticleBuffer{};
};